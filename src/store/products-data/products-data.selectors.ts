import { createSelector } from '@reduxjs/toolkit';
import { SliceName } from '../../constants';
import { Product, ProductPromo } from '../../types/product';
import { Review } from '../../types/review';
import { SortingDirection, SortingType } from '../../types/sorting';
import { State } from '../../types/state';
import { filterProductsByCategory, filterProductsByLevel, filterProductsByPrice, filterProductsByType, getMaximumPriceProduct, getMinumimumPriceProduct, sortProducts } from '../../utils';
import { NameCategoryEng } from '../../types/filter';

export const getAllProducts = (state: Pick<State, SliceName.Data>): Product[] => state[SliceName.Data].products;
export const getAllProductsPromo = (state: Pick<State, SliceName.Data>): ProductPromo[] => state[SliceName.Data].productsPromo;
export const getActivePopupAddItem = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].isActivePopupAddItem;
export const getActivePopupAddReview = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].isActivePopupAddReview;
export const getActivePopupAddReviewSuccess = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].isActivePopupAddReviewSuccess;
export const getSelectedProductId = (state: Pick<State, SliceName.Data>): string => state[SliceName.Data].selectedProductId;
export const getSelectedProductData = (state: Pick<State, SliceName.Data>): Product => state[SliceName.Data].selectedProductData;
export const getProductData = (state: Pick<State, SliceName.Data>): Product => state[SliceName.Data].productData;
export const getStatusLoadingProductData = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].isProductsDataLoading;
export const getSimilarProducts = (state: Pick<State, SliceName.Data>): Product[] => state[SliceName.Data].similarProducts;
export const getProductReviews = (state: Pick<State, SliceName.Data>): Review[] => state[SliceName.Data].productReviews;
export const getErrorProductData = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].errorProductData;
export const getErrorAddReview = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].errorAddReview;
export const getCurrentSortingType = (state: Pick<State, SliceName.Data>): SortingType | null => state[SliceName.Data].sortingType;
export const getCurrentSortingDirection = (state: Pick<State, SliceName.Data>): SortingDirection | null => state[SliceName.Data].sortingDirection;
export const getSortedProducts = createSelector([getAllProducts, getCurrentSortingType, getCurrentSortingDirection], (products, sortingType, sortingDirection) => sortProducts(products, sortingType, sortingDirection));
export const getCurrentFilterCategory = (state: Pick<State, SliceName.Data>): NameCategoryEng | null => state[SliceName.Data].filterCategory;
export const getCurrentFilterType = (state: Pick<State, SliceName.Data>): string[] => state[SliceName.Data].filterType;
export const getCurrentFilterLevel = (state: Pick<State, SliceName.Data>): string[] => state[SliceName.Data].filterLevel;
export const getCurrentPriceMin = (state: Pick<State, SliceName.Data>): number => state[SliceName.Data].priceMin;
export const getCurrentPriceMax = (state: Pick<State, SliceName.Data>): number => state[SliceName.Data].priceMax;
export const getFilteredProductsByCategory = createSelector([getSortedProducts, getCurrentFilterCategory], (products, category) => products?.slice().filter((product) => filterProductsByCategory(product, category)));
export const getFilteredProductsByType = createSelector([getFilteredProductsByCategory, getCurrentFilterType], (products, type) => filterProductsByType(products, type));
export const getFilteredProductsByLevel = createSelector([getFilteredProductsByType, getCurrentFilterLevel], (products, level) => filterProductsByLevel(products, level));
export const getMinPriceProduct = createSelector([getFilteredProductsByLevel], (products) => getMinumimumPriceProduct(products));
export const getMaxPriceProduct = createSelector([getFilteredProductsByLevel], (products) => getMaximumPriceProduct(products));
export const getFilteredProductsByPrice = createSelector([getFilteredProductsByLevel, getCurrentPriceMin, getCurrentPriceMax, getMaxPriceProduct], (products, currentPriceMin, currentPriceMax, priceMax) => products?.slice().filter((product) => filterProductsByPrice(product, currentPriceMin, currentPriceMax, Number(priceMax))));
export const getActivePopupAddProductToBasketSuccess = (state: Pick<State, SliceName.Data>): boolean => state[SliceName.Data].isActivePopupAddProductToBasketSuccess;
